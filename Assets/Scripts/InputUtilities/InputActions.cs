//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputSystem/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace InputUtilities
{
    public partial class @InputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""userInterface"",
            ""id"": ""2f370c76-663a-4779-9f67-de91053107f9"",
            ""actions"": [
                {
                    ""name"": ""pointerMove"",
                    ""type"": ""Value"",
                    ""id"": ""11fbea4d-2131-48a1-81ee-ac84576ca1cb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""pointerPress"",
                    ""type"": ""Button"",
                    ""id"": ""128ee287-cd27-467a-a554-71f28315405f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""13da705d-ebb7-49d5-99d7-97ec1ed9864d"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pointerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6eede1a3-2c3e-4fbb-88f6-589daf6f064e"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pointerPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // userInterface
            m_userInterface = asset.FindActionMap("userInterface", throwIfNotFound: true);
            m_userInterface_pointerMove = m_userInterface.FindAction("pointerMove", throwIfNotFound: true);
            m_userInterface_pointerPress = m_userInterface.FindAction("pointerPress", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // userInterface
        private readonly InputActionMap m_userInterface;
        private List<IUserInterfaceActions> m_UserInterfaceActionsCallbackInterfaces = new List<IUserInterfaceActions>();
        private readonly InputAction m_userInterface_pointerMove;
        private readonly InputAction m_userInterface_pointerPress;
        public struct UserInterfaceActions
        {
            private @InputActions m_Wrapper;
            public UserInterfaceActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @pointerMove => m_Wrapper.m_userInterface_pointerMove;
            public InputAction @pointerPress => m_Wrapper.m_userInterface_pointerPress;
            public InputActionMap Get() { return m_Wrapper.m_userInterface; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UserInterfaceActions set) { return set.Get(); }
            public void AddCallbacks(IUserInterfaceActions instance)
            {
                if (instance == null || m_Wrapper.m_UserInterfaceActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UserInterfaceActionsCallbackInterfaces.Add(instance);
                @pointerMove.started += instance.OnPointerMove;
                @pointerMove.performed += instance.OnPointerMove;
                @pointerMove.canceled += instance.OnPointerMove;
                @pointerPress.started += instance.OnPointerPress;
                @pointerPress.performed += instance.OnPointerPress;
                @pointerPress.canceled += instance.OnPointerPress;
            }

            private void UnregisterCallbacks(IUserInterfaceActions instance)
            {
                @pointerMove.started -= instance.OnPointerMove;
                @pointerMove.performed -= instance.OnPointerMove;
                @pointerMove.canceled -= instance.OnPointerMove;
                @pointerPress.started -= instance.OnPointerPress;
                @pointerPress.performed -= instance.OnPointerPress;
                @pointerPress.canceled -= instance.OnPointerPress;
            }

            public void RemoveCallbacks(IUserInterfaceActions instance)
            {
                if (m_Wrapper.m_UserInterfaceActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUserInterfaceActions instance)
            {
                foreach (var item in m_Wrapper.m_UserInterfaceActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UserInterfaceActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UserInterfaceActions @userInterface => new UserInterfaceActions(this);
        public interface IUserInterfaceActions
        {
            void OnPointerMove(InputAction.CallbackContext context);
            void OnPointerPress(InputAction.CallbackContext context);
        }
    }
}
